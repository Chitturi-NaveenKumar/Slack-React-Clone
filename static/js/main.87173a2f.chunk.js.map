{"version":3,"sources":["server/firebase.js","components/SideBar/UserInfo/UserInfo.js","store/actioncreator.js","store/actiontypes.js","components/SideBar/Notification/Notification.js","components/SideBar/Channels/Channels.js","components/SideBar/PrivateChat/PrivateChat.js","components/SideBar/FavouriteChannels/FavouriteChannels.js","components/SideBar/SideBar.js","components/Messages/MessageHeader/MessageHeader.js","components/Messages/MessageContent/MessageContent.js","components/Messages/ImageUpload/ImageUpload.js","components/Messages/MessageInput/MessageInput.js","components/Messages/Messages.js","App.js","components/Auth/Login/Login.js","components/Auth/Register/Register.js","store/reducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","connect","state","user","currentUser","props","signOut","auth","then","console","log","localStorage","removeItem","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","avatar","displayName","options","key","text","onClick","setChannel","channel","type","payload","currentChannel","Notification","messagesRef","database","ref","usersRef","useState","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","useEffect","child","uid","on","snap","val","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","reduce","agg","item","push","timestamp","id","lastVisited","channelMessagesTimeStamp","notificationCount","filter","length","Label","color","calculateNotificationCount","notificationChannelId","dispatch","selectChannel","modalOpenState","setModalOpenState","description","channelAddState","setChannelAddState","isLoadingState","setLoadingState","channelsState","setChannelsState","channelsRef","currentState","updatedState","off","closeModal","setLastVisited","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","created_by","update","catch","err","handleInput","e","target","value","Menu","style","marginTop","Item","fontSize","map","active","isFavourite","displayChannels","Modal","open","onClose","Form","Segment","stacked","Input","onChange","placeholder","Actions","Button","loading","history","useHistory","usersState","setUsersState","connectedUsersState","setConnectedUsersState","connectedRef","statusRef","isPrivateChat","userStatusRef","remove","index","indexOf","splice","selectUser","userTemp","generateChannelId","userId","displayUsers","favouriteChannels","favouriteChannel","SideBar","vertical","fixed","borderless","size","MessageHeader","clearing","floated","fluid","channelName","starChange","starred","Subheader","uniqueUsers","icon","searchTermChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","image","onLoad","imageLoaded","Text","content","ImageUpload","fileState","setFileState","acceptedTypes","basic","file","files","label","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setMessageState","fileDialogState","setFileDialog","sendMessage","downloadUrl","createMessageInfo","display","justifyContent","backgroundColor","padding","marginLeft","borderRadius","cursor","labelPosition","contentType","filePath","uuidv4","put","data","getDownloadURL","url","setfavouriteChannel","removefavouriteChannel","messagesState","setMessagesState","searchTermState","setSearchTermState","divRef","useRef","getItem","setItem","scrollIntoView","behavior","filterMessageBySearchTerm","regex","RegExp","acc","match","isStarred","favouriteRef","Group","messagesToDisplay","displayMessages","currentEl","App","columns","width","Login","email","password","userState","setuserState","isLoading","setIsLoading","errorState","seterrorState","event","currentuser","isFormEmpty","verticalAlign","textAlign","maxWidth","error","concat","signInWithEmailAndPassword","serverError","iconPosition","disabled","Message","to","Register","userCollectionRef","userName","confirmpassword","isSuccess","setIsSuccess","checkPassword","updateuserDetails","createdUser","updateProfile","saveUserInDB","createUserWithEmailAndPassword","success","defaultUserState","defaultChannelState","defaultFavouriteChannelState","combinedReducers","combineReducers","action","store","createStore","IndexWithRouter","withRouter","setUser","onAuthStateChanged","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87173a2f.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nimport \"firebase/database\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCPyN4bHblGLX-miAfr1-XYHuMFyOvMAqg\",\n  authDomain: \"slack-clone-73b7b.firebaseapp.com\",\n  databaseURL: \"https://slack-clone-73b7b-default-rtdb.firebaseio.com/\",\n  projectId: \"slack-clone-73b7b\",\n  storageBucket: \"slack-clone-73b7b.appspot.com\",\n  messagingSenderId: \"213037357193\",\n  appId: \"1:213037357193:web:35800f39d061d3134f4e58\",\n  measurementId: \"G-QWKD3RQ0K5\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;\n","import React from \"react\";\nimport { Grid, Header, Icon, Image, Dropdown } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\n\nimport \"./UserInfo.css\";\n\nconst UserInfo = (props) => {\n  const getDropDownOptions = () => {\n    return [\n      {\n        key: \"signout\",\n        text: <span onClick={signOut}>Sign Out</span>,\n      },\n    ];\n  };\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"user signed out\"));\n    localStorage.removeItem(\"props.user.uid\");\n  };\n\n  if (props.user) {\n    return (\n      <Grid>\n        <Grid.Column>\n          <Grid.Row className=\"userinfo_grid_row\">\n            <Header inverted as=\"h2\">\n              <Icon name=\"slack\" />\n              <Header.Content>Slack</Header.Content>\n            </Header>\n            <Header className=\"userinfo_displayname\" inverted as=\"h4\">\n              <Dropdown\n                trigger={\n                  <span>\n                    <Image src={props.user.photoURL} avatar></Image>\n                    {props.user.displayName}\n                  </span>\n                }\n                options={getDropDownOptions()}\n              ></Dropdown>\n            </Header>\n          </Grid.Row>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps)(UserInfo);\n","import { SET_USER, SET_CHANNEL ,SET_FAVOURITECHANNEL,REMOVE_FAVOURITECHANNEL} from './actiontypes';\n\nexport const setUser = (user) => {\n    return {\n        type: SET_USER,\n        payload: {\n            currentUser: user\n        }\n    }\n}\n\nexport const setChannel = (channel) => {\n    return {\n        type: SET_CHANNEL,\n        payload: {\n            currentChannel: channel\n        }\n    }\n}\n\nexport const setfavouriteChannel = (channel) => {\n    return {\n        type: SET_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}\n\nexport const removefavouriteChannel = (channel) => {\n    return {\n        type: REMOVE_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}","export const SET_USER = 'SET_USER'\n\nexport const SET_CHANNEL = 'SET_CHANNEL'\n\nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL'\n\nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL'","import React, { useState, useEffect } from \"react\";\nimport { Label } from \"semantic-ui-react\";\n\nimport firebase from \"../../../server/firebase\";\n\nexport const Notification = (props) => {\n  const messagesRef = firebase.database().ref(\"messages\");\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const [channelsVisitedState, setChannelsVisitedState] = useState({});\n\n  const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\n\n  useEffect(() => {\n    if (props.user) {\n      usersRef\n        .child(props.user.uid)\n        .child(\"lastVisited\")\n        .on(\"value\", (snap) => {\n          setChannelsVisitedState(snap.val());\n        });\n\n      messagesRef.on(\"value\", (snap) => {\n        let messages = snap.val();\n        console.log(messages);\n        let channelsId = Object.keys(messages);\n        let messagesTimeStamp = {};\n        channelsId.forEach((channelId) => {\n          let channelMessageKeys = Object.keys(messages[channelId]);\n          channelMessageKeys.reduce((agg, item) => {\n            messagesTimeStamp[channelId] = [\n              ...(messagesTimeStamp[channelId] || []),\n            ];\n            messagesTimeStamp[channelId].push(\n              messages[channelId][item].timestamp\n            );\n          });\n        });\n        setMessagesTimeStampState(messagesTimeStamp);\n      });\n    }\n  }, [props.user]);\n\n  const calculateNotificationCount = (channelId) => {\n    if (\n      channelsVisitedState &&\n      messagesTimeStampState &&\n      props.channel &&\n      props.channel.id !== channelId\n    ) {\n      let lastVisited = channelsVisitedState[channelId];\n\n      let channelMessagesTimeStamp = messagesTimeStampState[channelId];\n\n      if (channelMessagesTimeStamp) {\n        let notificationCount = channelMessagesTimeStamp.filter(\n          (timestamp) => !lastVisited || lastVisited < timestamp\n        ).length;\n        return notificationCount === 0 ? null : (\n          <Label color=\"red\">{notificationCount}</Label>\n        );\n      }\n    }\n\n    return null;\n  };\n\n  return (\n    <>\n      {\" \"}\n      {props.displayName}\n      {calculateNotificationCount(props.notificationChannelId)}{\" \"}\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\nimport { Notification } from \"../Notification/Notification\";\n\nimport \"./Channels.css\";\nimport { Menu, Icon, Modal, Button, Form, Segment } from \"semantic-ui-react\";\n\nconst Channels = (props) => {\n  const [modalOpenState, setModalOpenState] = useState(false);\n  const [channelAddState, setChannelAddState] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const [isLoadingState, setLoadingState] = useState(false);\n  const [channelsState, setChannelsState] = useState([]);\n\n  const channelsRef = firebase.database().ref(\"channels\");\n  const usersRef = firebase.database().ref(\"users\");\n\n  useEffect(() => {\n    channelsRef.on(\"child_added\", (snap) => {\n      setChannelsState((currentState) => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.val());\n        return updatedState;\n      });\n    });\n\n    return () => channelsRef.off();\n  }, []);\n\n  useEffect(() => {\n    if (channelsState.length > 0) {\n      props.selectChannel(channelsState[0]);\n    }\n  }, [!props.channel ? channelsState : null]);\n\n  const openModal = () => {\n    setModalOpenState(true);\n  };\n\n  const closeModal = () => {\n    setModalOpenState(false);\n  };\n\n  const checkIfFormValid = () => {\n    return (\n      channelAddState && channelAddState.name && channelAddState.description\n    );\n  };\n\n  const displayChannels = () => {\n    if (channelsState.length > 0) {\n      return channelsState.map((channel) => {\n        return (\n          <Menu.Item\n            key={channel.id}\n            name={channel.name}\n            onClick={() => selectChannel(channel)}\n            active={\n              props.channel &&\n              channel.id === props.channel.id &&\n              !props.channel.isFavourite\n            }\n          >\n            <Notification\n              user={props.user}\n              channel={props.channel}\n              notificationChannelId={channel.id}\n              displayName={\"# \" + channel.name}\n            />\n          </Menu.Item>\n        );\n      });\n    }\n  };\n\n  const selectChannel = (channel) => {\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, channel);\n    props.selectChannel(channel);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef\n      .child(user.uid)\n      .child(\"lastVisited\")\n      .child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const onSubmit = () => {\n    if (!checkIfFormValid()) {\n      return;\n    }\n\n    const key = channelsRef.push().key;\n\n    const channel = {\n      id: key,\n      name: channelAddState.name,\n      description: channelAddState.description,\n      created_by: {\n        name: props.user.displayName,\n        avatar: props.user.photoURL,\n      },\n    };\n    setLoadingState(true);\n    channelsRef\n      .child(key)\n      .update(channel)\n      .then(() => {\n        setChannelAddState({ name: \"\", description: \"\" });\n        setLoadingState(false);\n        closeModal();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleInput = (e) => {\n    let target = e.target;\n    setChannelAddState((currentState) => {\n      let updatedState = { ...currentState };\n      updatedState[target.name] = target.value;\n      return updatedState;\n    });\n  };\n\n  return (\n    <>\n      {\" \"}\n      <Menu.Menu style={{ marginTop: \"35px\" }}>\n        <Menu.Item style={{ fontSize: \"17px\" }}>\n          <span>\n            <Icon name=\"exchange\" /> Channels\n          </span>\n          ({channelsState.length})\n        </Menu.Item>\n        {displayChannels()}\n        <Menu.Item>\n          <span className=\"clickable\" onClick={openModal}>\n            <Icon name=\"add\" /> ADD\n          </span>\n        </Menu.Item>\n      </Menu.Menu>\n      <Modal open={modalOpenState} onClose={closeModal}>\n        <Modal.Header>Create Channel</Modal.Header>\n        <Modal.Content>\n          <Form onSubmit={onSubmit}>\n            <Segment stacked>\n              <Form.Input\n                name=\"name\"\n                value={channelAddState.name}\n                onChange={handleInput}\n                type=\"text\"\n                placeholder=\"Enter Channel Name\"\n              />\n              <Form.Input\n                name=\"description\"\n                value={channelAddState.description}\n                onChange={handleInput}\n                type=\"text\"\n                placeholder=\"Enter Channel Description\"\n              />\n            </Segment>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button loading={isLoadingState} onClick={onSubmit}>\n            <Icon name=\"checkmark\" /> Save\n          </Button>\n          <Button onClick={closeModal}>\n            <Icon name=\"remove\" /> Cancel\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\nimport { Notification } from \"../Notification/Notification\";\n\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst PrivateChat = (props) => {\n  const history = useHistory();\n  const [usersState, setUsersState] = useState([]);\n\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const connectedRef = firebase.database().ref(\".info/connected\");\n\n  const statusRef = firebase.database().ref(\"status\");\n\n  useEffect(() => {\n    usersRef.on(\"child_added\", (snap) => {\n      setUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let user = snap.val();\n        user.name = user.displayName;\n        user.id = snap.key;\n        user.isPrivateChat = true;\n        updatedState.push(user);\n\n        return updatedState;\n      });\n    });\n\n    connectedRef.on(\"value\", (snap) => {\n      if (props.user && snap.val()) {\n        const userStatusRef = statusRef.child(props.user.uid);\n        userStatusRef.set(true);\n        userStatusRef.onDisconnect().remove();\n      }\n    });\n\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n\n  useEffect(() => {\n    statusRef.on(\"child_added\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n\n    statusRef.on(\"child_removed\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    try {\n      if (usersState.length > 0) {\n        return usersState\n          .filter((user) => user.id !== props.user.uid)\n          .map((user) => {\n            return (\n              <Menu.Item\n                key={user.id}\n                name={user.name}\n                onClick={() => selectUser(user)}\n                active={\n                  props.channel &&\n                  generateChannelId(user.id) === props.channel.id\n                }\n              >\n                <Icon\n                  name=\"circle\"\n                  color={`${\n                    connectedUsersState.indexOf(user.id) !== -1\n                      ? \"green\"\n                      : \"red\"\n                  }`}\n                />\n\n                <Notification\n                  user={props.user}\n                  channel={props.channel}\n                  notificationChannelId={generateChannelId(user.id)}\n                  displayName={\"@ \" + user.name}\n                />\n              </Menu.Item>\n            );\n          });\n      }\n    } catch (err) {\n      history.push(\"/login\");\n    }\n  };\n  const selectUser = (user) => {\n    let userTemp = { ...user };\n    userTemp.id = generateChannelId(user.id);\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, userTemp);\n    props.selectChannel(userTemp);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef\n      .child(user.uid)\n      .child(\"lastVisited\")\n      .child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const generateChannelId = (userId) => {\n    if (props.user.uid < userId) {\n      return props.user.uid + userId;\n    } else {\n      return userId + props.user.uid;\n    }\n  };\n\n  return (\n    <Menu.Menu style={{ marginTop: \"35px\" }}>\n      <Menu.Item style={{ fontSize: \"17px\" }}>\n        <span>\n          <Icon name=\"mail\" /> Direct Messages\n        </span>\n        ({usersState.length - 1})\n      </Menu.Item>\n      {displayUsers()}\n    </Menu.Menu>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setChannel } from \"../../../store/actioncreator\"\n\nimport { Menu, Icon } from 'semantic-ui-react';\n\nconst FavouriteChannels = (props) => {\n\n    const displayChannels = () => {\n        if (Object.keys(props.favouriteChannels).length > 0) {\n            return Object.keys(props.favouriteChannels).map((channelId) => {\n                return <Menu.Item\n                    key={channelId}\n                    name={props.favouriteChannels[channelId]}\n                    onClick={() => props.selectChannel({ id: channelId, name: props.favouriteChannels[channelId] , isFavourite : true })}\n                    active={props.channel && channelId === props.channel.id && props.channel.isFavourite}\n                >\n                    {\"# \" + props.favouriteChannels[channelId]}\n                </Menu.Item>\n            })\n        }\n    } \n\n    return <Menu.Menu >\n        <Menu.Item style={{ fontSize: '17px' }}>\n            <span>\n                <Icon name=\"star\" /> Starred\n            </span>\n            ({Object.keys(props.favouriteChannels).length})\n        </Menu.Item>\n        {displayChannels()}\n    </Menu.Menu>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        channel: state.channel.currentChannel,\n        favouriteChannels: state.favouriteChannel.favouriteChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectChannel: (channel) => dispatch(setChannel(channel))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavouriteChannels);","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport UserInfo from \"./UserInfo/UserInfo\";\nimport Channels from \"./Channels/Channels\";\nimport PrivateChat from \"./PrivateChat/PrivateChat\";\nimport FavouriteChannels from \"./FavouriteChannels/FavouriteChannels\";\n\nimport \"./SideBar.css\";\n\nexport const SideBar = () => {\n  return (\n    <Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\n      <UserInfo />\n      <FavouriteChannels />\n      <Channels />\n      <PrivateChat />\n    </Menu>\n  );\n};\n","import React from 'react';\nimport { Segment, Header, Input, Icon } from 'semantic-ui-react';\n\nconst MessageHeader = (props) => {\n    return <Segment clearing>\n        <Header floated=\"left\" fluid=\"true\" as=\"h2\">\n            <span>\n                {(props.isPrivateChat ? \"@ \" : \"# \") + props.channelName}\n                {!props.isPrivateChat && <Icon\n                    onClick={props.starChange}\n                    name={props.starred ? \"star\" : \"star outline\"}\n                    color={props.starred ? \"yellow\" : \"black\"} />}\n            </span>\n            <Header.Subheader> {props.uniqueUsers} User{props.uniqueUsers === 1 ? \"\" : \"s\"}</Header.Subheader>\n        </Header>\n        <Header floated=\"right\">\n            <Input\n                name=\"search\"\n                icon=\"search\"\n                placeholder=\"Search Messages\"\n                size=\"mini\"\n                onChange={props.searchTermChange}\n            />\n        </Header>\n\n    </Segment>\n}\n\nexport default MessageHeader;","import React from 'react';\nimport { Comment,Image } from \"semantic-ui-react\";\nimport TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\n\nimport \"./MessageContent.css\";\n\nTimeAgo.locale(en);\n\nconst timeAgo = new TimeAgo();\n\nconst MessageContent = (props) => {\n    return <Comment>\n        <Comment.Avatar src={props.message.user.avatar} />\n        <Comment.Content className={props.ownMessage ? \"ownMessage\" : null}>\n            <Comment.Author as=\"a\">{props.message.user.name}</Comment.Author>\n            <Comment.Metadata>{timeAgo.format(props.message.timestamp)}</Comment.Metadata>\n            {props.message.image ? <Image onLoad={props.imageLoaded} src={props.message.image} /> :\n                <Comment.Text>{props.message.content}</Comment.Text>\n            }\n        </Comment.Content>\n    </Comment>\n}\n\nexport default MessageContent;","import React, { useState } from 'react';\nimport { Input, Modal, Button, Icon } from 'semantic-ui-react';\nimport mime from \"mime-types\"\n\nexport const ImageUpload = (props) => {\n\n    const [fileState, setFileState] = useState(null);\n\n    const acceptedTypes = [\"image/png\", \"image/jpeg\"]\n\n    const onFileAdded = (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            setFileState(file);\n        }\n    }\n\n    const submit = () => {\n        if (fileState && acceptedTypes.includes(mime.lookup(fileState.name))) {\n            props.uploadImage(fileState, mime.lookup(fileState.name));\n            props.onClose();\n            setFileState(null);\n        }\n    }\n\n    return (<Modal basic open={props.open} onClose={props.onClose}>\n        <Modal.Header>Select a image</Modal.Header>\n        <Modal.Content>\n            <Input\n                type=\"file\"\n                name=\"file\"\n                onChange={onFileAdded}\n                fluid\n                label=\"File Type (png , jpeg)\"\n            />\n        </Modal.Content>\n        <Modal.Actions>\n            <Button color=\"green\" onClick={submit}>\n                <Icon name=\"checkmark\" />Add\n            </Button>\n            <Button color=\"red\" onClick={props.onClose}>\n                <Icon name=\"remove\" />Cancel\n            </Button>\n        </Modal.Actions>\n    </Modal>)\n}","import React, { useState } from \"react\";\nimport { Segment, Input, Button } from \"semantic-ui-react\";\nimport firebase from \"../../../server/firebase\";\nimport { connect } from \"react-redux\";\nimport { ImageUpload } from \"../ImageUpload/ImageUpload\";\nimport uuidv4 from \"uuid/v4\";\n\nconst MessageInput = (props) => {\n  const messageRef = firebase.database().ref(\"messages\");\n\n  const storageRef = firebase.storage().ref();\n\n  const [messageState, setMessageState] = useState(\"\");\n\n  const [fileDialogState, setFileDialog] = useState(false);\n\n  const createMessageInfo = (downloadUrl) => {\n    return {\n      user: {\n        avatar: props.user.photoURL,\n        name: props.user.displayName,\n        id: props.user.uid,\n      },\n      content: messageState,\n      image: downloadUrl || \"\",\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n    };\n  };\n\n  const sendMessage = (downloadUrl) => {\n    if (messageState || downloadUrl) {\n      messageRef\n        .child(props.channel.id)\n        .push()\n        .set(createMessageInfo(downloadUrl))\n        .then(() => setMessageState(\"\"))\n        .catch((err) => console.log(err));\n    }\n  };\n\n  const onMessageChange = (e) => {\n    const target = e.target;\n    setMessageState(target.value);\n  };\n\n  const createActionButtons = () => {\n    return (\n      <>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <div\n            onClick={() => {\n              sendMessage();\n            }}\n            style={{\n              color: \"white\",\n              backgroundColor: \"#eb7a34\",\n              padding: \"5px\",\n              marginLeft: \"10px\",\n              borderRadius: \"5px\",\n              cursor: \"pointer\",\n            }}\n          >\n            <Button icon=\"send\" color=\"orange\" />\n            Add Reply\n          </div>\n          <div\n            onClick={() => setFileDialog(true)}\n            style={{\n              color: \"white\",\n              backgroundColor: \"#3fc232\",\n              padding: \"5px\",\n              marginLeft: \"10px\",\n              borderRadius: \"5px\",\n            }}\n          >\n            <Button icon=\"upload\" color=\"green\" />\n            Upload Media\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  const uploadImage = (file, contentType) => {\n    const filePath = `chat/images/${uuidv4()}.jpg`;\n\n    storageRef\n      .child(filePath)\n      .put(file, { contentType: contentType })\n      .then((data) => {\n        data.ref\n          .getDownloadURL()\n          .then((url) => {\n            sendMessage(url);\n          })\n          .catch((err) => console.log(err));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <Segment>\n      <Input\n        onChange={onMessageChange}\n        fluid={true}\n        name=\"message\"\n        value={messageState}\n        label={createActionButtons()}\n        labelPosition=\"right\"\n      />\n      <ImageUpload\n        uploadImage={uploadImage}\n        open={fileDialogState}\n        onClose={() => setFileDialog(false)}\n      />\n    </Segment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nexport default connect(mapStateToProps)(MessageInput);\n","import React, { useEffect, useState, useRef } from \"react\";\n\nimport MessageHeader from \"./MessageHeader/MessageHeader\";\nimport MessageContent from \"./MessageContent/MessageContent\";\nimport MessageInput from \"./MessageInput/MessageInput\";\nimport { connect } from \"react-redux\";\nimport {\n  setfavouriteChannel,\n  removefavouriteChannel,\n} from \"../../store/actioncreator\";\nimport firebase from \"../../server/firebase\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport \"./Messages.css\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Messages = (props) => {\n  const history = useHistory();\n  const messageRef = firebase.database().ref(\"messages\");\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const [messagesState, setMessagesState] = useState([]);\n\n  const [searchTermState, setSearchTermState] = useState(\"\");\n\n  let divRef = useRef();\n  let uid = localStorage.getItem(\"props.user.uid\");\n  useEffect(() => {\n    if (props.channel) {\n      setMessagesState([]);\n      messageRef.child(props.channel.id).on(\"child_added\", (snap) => {\n        setMessagesState((currentState) => {\n          let updatedState = [...currentState];\n          updatedState.push(snap.val());\n          return updatedState;\n        });\n      });\n\n      return () => messageRef.child(props.channel.id).off();\n    }\n  }, [props.channel]);\n\n  useEffect(() => {\n    if (props.user) {\n      localStorage.setItem(\"props.user.uid\", props.user.uid);\n      usersRef\n        .child(props.user.uid)\n        .child(\"favourite\")\n        .on(\"child_added\", (snap) => {\n          props.setfavouriteChannel(snap.val());\n        });\n\n      usersRef\n        .child(props.user.uid)\n        .child(\"favourite\")\n        .on(\"child_removed\", (snap) => {\n          props.removefavouriteChannel(snap.val());\n        });\n\n      return () => usersRef.child(props.user.uid).child(\"favourite\").off();\n    }\n  }, [props.user]);\n\n  useEffect(() => {\n    divRef.scrollIntoView({ behavior: \"smooth\" });\n  }, [messagesState]);\n\n  const displayMessages = () => {\n    let messagesToDisplay = searchTermState\n      ? filterMessageBySearchTerm()\n      : messagesState;\n    if (messagesToDisplay.length > 0) {\n      if (props.user === null) {\n        history.push(\"/login\");\n      }\n      return messagesToDisplay.map((message) => {\n        return (\n          <MessageContent\n            imageLoaded={imageLoaded}\n            ownMessage={message.user.id === uid}\n            key={message.timestamp}\n            message={message}\n          />\n        );\n      });\n    }\n  };\n\n  const imageLoaded = () => {\n    divRef.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const uniqueusersCount = () => {\n    const uniqueUsers = messagesState.reduce((acc, message) => {\n      if (!acc.includes(message.user.name)) {\n        acc.push(message.user.name);\n      }\n      return acc;\n    }, []);\n\n    return uniqueUsers.length;\n  };\n\n  const searchTermChange = (e) => {\n    const target = e.target;\n    setSearchTermState(target.value);\n  };\n\n  const filterMessageBySearchTerm = () => {\n    const regex = new RegExp(searchTermState, \"gi\");\n    const messages = messagesState.reduce((acc, message) => {\n      if (\n        (message.content && message.content.match(regex)) ||\n        message.user.name.match(regex)\n      ) {\n        acc.push(message);\n      }\n      return acc;\n    }, []);\n\n    return messages;\n  };\n\n  const starChange = () => {\n    let favouriteRef = usersRef\n      .child(props.user.uid)\n      .child(\"favourite\")\n      .child(props.channel.id);\n    if (isStarred()) {\n      favouriteRef.remove();\n    } else {\n      favouriteRef.set({\n        channelId: props.channel.id,\n        channelName: props.channel.name,\n      });\n    }\n  };\n\n  const isStarred = () => {\n    return Object.keys(props.favouriteChannels).includes(props.channel?.id);\n  };\n\n  return (\n    <div className=\"messages\">\n      <MessageHeader\n        starChange={starChange}\n        starred={isStarred()}\n        isPrivateChat={props.channel?.isPrivateChat}\n        searchTermChange={searchTermChange}\n        channelName={props.channel?.name}\n        uniqueUsers={uniqueusersCount()}\n      />\n      <Segment className=\"messagecontent\">\n        <Comment.Group>\n          {displayMessages()}\n          <div ref={(currentEl) => (divRef = currentEl)}></div>\n        </Comment.Group>\n      </Segment>\n      <MessageInput />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    channel: state.channel.currentChannel,\n    user: state.user.currentUser,\n    favouriteChannels: state.favouriteChannel.favouriteChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\n    removefavouriteChannel: (channel) =>\n      dispatch(removefavouriteChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\n","import React from \"react\";\nimport { SideBar } from \"./components/SideBar/SideBar\";\nimport Messages from \"./components/Messages/Messages\";\n\nimport \"./App.css\";\nimport { Grid } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <Grid columns=\"equal\">\n      <SideBar />\n      <Grid.Column className=\"messagepanel\">\n        <Messages />\n      </Grid.Column>\n\n      <Grid.Column width={3}>\n        <span></span>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Header,\n  Icon,\n  Button,\n  Message,\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport firebase from \"../../../server/firebase\";\n\nimport \"../Auth.css\";\n\nconst Login = () => {\n  let user = {\n    email: \"\",\n    password: \"\",\n  };\n\n  let errors = [];\n\n  const [userState, setuserState] = useState(user);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorState, seterrorState] = useState(errors);\n\n  const handleInput = (event) => {\n    let target = event.target;\n    setuserState((currentState) => {\n      let currentuser = { ...currentState };\n      currentuser[target.name] = target.value;\n      return currentuser;\n    });\n  };\n\n  const checkForm = () => {\n    if (isFormEmpty()) {\n      seterrorState((error) =>\n        error.concat({ message: \"Please fill in all fields\" })\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const isFormEmpty = () => {\n    return !userState.password.length || !userState.email.length;\n  };\n\n  const formaterrors = () => {\n    return errorState.map((error, index) => <p key={index}>{error.message}</p>);\n  };\n\n  const onSubmit = (event) => {\n    seterrorState(() => []);\n    if (checkForm()) {\n      setIsLoading(true);\n      firebase\n        .auth()\n        .signInWithEmailAndPassword(userState.email, userState.password)\n        .then((user) => {\n          setIsLoading(false);\n          console.log(user);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  return (\n    <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\">\n      <Grid.Column style={{ maxWidth: \"500px\" }}>\n        <Header icon as=\"h2\" color=\"purple\">\n          <Icon name=\"slack\" />\n          Login to ChatApp\n        </Header>\n        <Form onSubmit={onSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"email\"\n              value={userState.email}\n              icon=\"mail\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"email\"\n              placeholder=\"User Email\"\n            />\n            <Form.Input\n              name=\"password\"\n              value={userState.password}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"User Password\"\n            />\n          </Segment>\n          <Button\n            disabled={isLoading}\n            color=\"purple\"\n            style={{ width: \"450px\", fontSize: \"18px\" }}\n            loading={isLoading}\n          >\n            Login\n          </Button>\n        </Form>\n        {errorState.length > 0 && (\n          <Message error>\n            <h3>Errors</h3>\n            {formaterrors()}\n          </Message>\n        )}\n        <Message>\n          Don't have an account? <Link to=\"/register\">Register</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Header,\n  Icon,\n  Button,\n  Message,\n} from \"semantic-ui-react\";\nimport firebase from \"../../../server/firebase\";\n\nimport \"../Auth.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Register = () => {\n  let user = {\n    userName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmpassword: \"\",\n  };\n\n  let errors = [];\n\n  let userCollectionRef = firebase.database().ref(\"users\");\n\n  const [userState, setuserState] = useState(user);\n  const [errorState, seterrorState] = useState(errors);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const handleInput = (event) => {\n    let target = event.target;\n    setuserState((currentState) => {\n      let currentuser = { ...currentState };\n      currentuser[target.name] = target.value;\n      return currentuser;\n    });\n  };\n\n  const checkForm = () => {\n    if (isFormEmpty()) {\n      seterrorState((error) =>\n        error.concat({ message: \"Please fill in all fields\" })\n      );\n      return false;\n    } else if (!checkPassword()) {\n      return false;\n    }\n    return true;\n  };\n\n  const isFormEmpty = () => {\n    return (\n      !userState.userName.length ||\n      !userState.password.length ||\n      !userState.confirmpassword.length ||\n      !userState.email.length\n    );\n  };\n\n  const checkPassword = () => {\n    if (userState.password.length < 8) {\n      seterrorState((error) =>\n        error.concat({ message: \"Password length should be greater than 8\" })\n      );\n      return false;\n    } else if (userState.password !== userState.confirmpassword) {\n      seterrorState((error) =>\n        error.concat({\n          message: \"Password and Confirm Password does not match\",\n        })\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const onSubmit = (event) => {\n    seterrorState(() => []);\n    setIsSuccess(false);\n    if (checkForm()) {\n      setIsLoading(true);\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(userState.email, userState.password)\n        .then((createdUser) => {\n          setIsLoading(false);\n          updateuserDetails(createdUser);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  const updateuserDetails = (createdUser) => {\n    if (createdUser) {\n      setIsLoading(true);\n      createdUser.user\n        .updateProfile({\n          displayName: userState.userName,\n          photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`,\n        })\n        .then(() => {\n          setIsLoading(false);\n          saveUserInDB(createdUser);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  const saveUserInDB = (createdUser) => {\n    setIsLoading(true);\n    userCollectionRef\n      .child(createdUser.user.uid)\n      .set({\n        displayName: createdUser.user.displayName,\n        photoURL: createdUser.user.photoURL,\n      })\n      .then(() => {\n        setIsLoading(false);\n        setIsSuccess(true);\n      })\n      .catch((serverError) => {\n        setIsLoading(false);\n        seterrorState((error) => error.concat(serverError));\n      });\n  };\n\n  const formaterrors = () => {\n    return errorState.map((error, index) => <p key={index}>{error.message}</p>);\n  };\n\n  return (\n    <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\">\n      <Grid.Column style={{ maxWidth: \"500px\" }}>\n        <Header icon as=\"h2\" color=\"orange\">\n          <Icon name=\"puzzle piece\" />\n          Register\n        </Header>\n        <Form onSubmit={onSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"userName\"\n              value={userState.userName}\n              icon=\"user\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"text\"\n              placeholder=\"User Name\"\n            />\n            <Form.Input\n              name=\"email\"\n              value={userState.email}\n              icon=\"mail\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"email\"\n              placeholder=\"User Email\"\n            />\n            <Form.Input\n              name=\"password\"\n              value={userState.password}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"User Password\"\n            />\n            <Form.Input\n              name=\"confirmpassword\"\n              value={userState.confirmpassword}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n            />\n          </Segment>\n          <Button\n            disabled={isLoading}\n            color=\"orange\"\n            style={{ width: \"450px\", fontSize: \"18px\" }}\n            loading={isLoading}\n          >\n            Register\n          </Button>\n        </Form>\n        {errorState.length > 0 && (\n          <Message error>\n            <h3>Errors</h3>\n            {formaterrors()}\n          </Message>\n        )}\n        {isSuccess && (\n          <Message success>\n            <h3>Successfully Registered</h3>\n          </Message>\n        )}\n        <Message>\n          Already a user? <Link to=\"/login\">Login</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Register;\n","import { SET_USER, SET_CHANNEL, SET_FAVOURITECHANNEL, REMOVE_FAVOURITECHANNEL } from './actiontypes';\nimport { combineReducers } from \"redux\";\n\nlet defaultUserState = {\n    currentUser: null\n}\n\nconst userReducer = (state = defaultUserState, action) => {\n    if (action.type === SET_USER) {\n        let payload = action.payload;\n        state = { ...payload };\n        return state;\n    }\n    return state;\n}\n\nlet defaultChannelState = {\n    currentChannel: null,\n    loading : true\n}\n\n\nconst channelReducer = (state = defaultChannelState, action) => {\n    if (action.type === SET_CHANNEL) {\n        let payload = action.payload;\n        state = { ...payload };\n        state.loading= false;\n        return state;\n    }\n    return state;\n}\n\nlet defaultFavouriteChannelState = {\n    favouriteChannel: {}\n}\n\n\nconst favouriteChannelReducer = (state = defaultFavouriteChannelState, action) => {\n    if (action.type === SET_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        updatedState[payload.channelId] = payload.channelName;\n        return { favouriteChannel: updatedState };\n    } else if (action.type === REMOVE_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        delete updatedState[payload.channelId];\n        return { favouriteChannel: updatedState };\n    }\n    return state;\n}\n\nexport const combinedReducers = combineReducers({ user: userReducer, channel: channelReducer ,favouriteChannel : favouriteChannelReducer  })","import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { connect, Provider } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport App from \"./App\";\nimport Login from \"./components/Auth/Login/Login\";\nimport Register from \"./components/Auth/Register/Register\";\nimport firebase from \"./server/firebase\";\nimport { setUser } from \"./store/actioncreator\";\nimport { combinedReducers } from \"./store/reducer\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst store = createStore(combinedReducers);\n\nconst Index = (props) => {\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        props.setUser(user);\n        props.history.push(\"/\");\n      } else {\n        props.setUser(null);\n        props.history.push(\"/login\");\n      }\n    });\n  }, []);\n\n  console.log(\"Debug\", props.currentUser);\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/\" component={App} />\n      </Switch>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.user.currentUser,\n    loading: state.channel.loading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => {\n      dispatch(setUser(user));\n    },\n  };\n};\n\nconst IndexWithRouter = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Index)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <IndexWithRouter />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}